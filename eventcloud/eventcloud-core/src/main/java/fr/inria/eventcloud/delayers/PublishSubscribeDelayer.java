/**
 * Copyright (c) 2011-2014 INRIA.
 * 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>
 **/
package fr.inria.eventcloud.delayers;

import fr.inria.eventcloud.api.Quadruple;
import fr.inria.eventcloud.configuration.EventCloudProperties;
import fr.inria.eventcloud.delayers.actions.ThreeInOneAction;
import fr.inria.eventcloud.delayers.buffers.ExtendedCompoundEvent;
import fr.inria.eventcloud.delayers.buffers.ThreeInOneBuffer;
import fr.inria.eventcloud.overlay.SemanticCanOverlay;
import fr.inria.eventcloud.pubsub.Subscription;

/**
 * A delayer class in charge of gathering the multiple delayers instances used
 * by the publish/subscribe layer. It concerns publish requests made with SBCE1,
 * 2 and 3 but also subscriptions and rewritten subscriptions generated by SBCE1
 * and 2.
 * 
 * @author lpellegr
 */
public final class PublishSubscribeDelayer extends Delayer<Object> {

    private final ThreeInOneBuffer buffer;

    public PublishSubscribeDelayer(SemanticCanOverlay overlay) {
        super(
                overlay,
                new ThreeInOneBuffer(overlay, getCommitSize()),
                new ThreeInOneAction(
                        overlay,
                        EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_THREAD_POOL_SIZE.getValue()),
                "Quadruples/Subscriptions/CEs", getCommitInterval(),
                getCommitSize());

        this.buffer = (ThreeInOneBuffer) super.buffer;
    }

    private static final int getCommitInterval() {
        if (!EventCloudProperties.isSbce3PubSubAlgorithmUsed()
                && EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_INTERVAL.getValue()
                        .equals(
                                EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_INTERVAL.getDefaultValue())) {
            return EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_INTERVAL.getValue() / 4;
        } else {
            return EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_INTERVAL.getValue();
        }
    }

    private static final int getCommitSize() {
        if (!EventCloudProperties.isSbce3PubSubAlgorithmUsed()
                && EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_SIZE.getValue()
                        .equals(
                                EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_SIZE.getDefaultValue())) {
            return EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_SIZE.getValue() / 4;
        } else {
            return EventCloudProperties.PUBLISH_SUBSCRIBE_DELAYER_COMMIT_SIZE.getValue();
        }
    }

    public void receive(ExtendedCompoundEvent event) {
        synchronized (this.buffer) {
            this.buffer.add(event);
            this.commitOrCreateCommitThread();
        }
    }

    public void receive(Quadruple q) {
        synchronized (this.buffer) {
            this.buffer.add(q);
            this.commitOrCreateCommitThread();
        }
    }

    public void receive(Subscription s) {
        synchronized (this.buffer) {
            this.buffer.add(s);
            this.commitOrCreateCommitThread();
        }
    }

}
